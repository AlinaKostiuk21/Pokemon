{"version":3,"sources":["components/PokemonCard/PokemonCard.tsx","components/PokemonsList/PokemonsList.tsx","api.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PokemonCard","props","Pokemon","pokemon","fullPokemon","onItemClick","getPokemonStat","aPokemon","stat","stats","findStat","find","item","name","base_stat","pokemonImage","sprites","other","dream_world","front_default","pokemonTypes","types","map","type","getPokemonTypes","pokemonMoves","moves","length","getPokemonMoves","pokemonHp","pokemonAttack","pokemonDefence","pokemonSpAttack","pokemonSpDefence","pokemonSpeed","className","onClick","url","src","alt","weight","PokemonsList","pokemons","request","fetch","then","response","ok","Error","status","statusText","json","App","useState","setPokemons","nextPokemons","setNextPokemons","selectedPokemon","setSelectedPokemon","useEffect","offset","getPokemons","next","results","prevState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29eb2b4e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FullPokemon, SimplePokemon} from \"../../react-app-env\";\r\nimport '../../styles/main.scss';\r\n\r\ninterface Props {\r\n    pokemon: SimplePokemon,\r\n    fullPokemon?: FullPokemon,\r\n    onItemClick: (url: string | null) => void,\r\n}\r\n\r\ntype KindPokemon = SimplePokemon | FullPokemon;\r\n\r\nexport const PokemonCard: React.FC<Props> = (props) => {\r\n    const { pokemon, fullPokemon, onItemClick } = props;\r\n\r\n    const getPokemonImage = (Pokemon: KindPokemon) => {\r\n        if (\"sprites\" in Pokemon && Pokemon.sprites) {\r\n            return Pokemon.sprites.other.dream_world.front_default;\r\n        }\r\n\r\n        return \"images/no-pokemon.png\"\r\n    }\r\n\r\n    const getPokemonTypes = (aPokemon: KindPokemon) => {\r\n        if (\"types\" in aPokemon && aPokemon.types) {\r\n            return aPokemon.types.map(item => item.type.name);\r\n        }\r\n\r\n        return \"???\";\r\n    }\r\n\r\n    const getPokemonMoves = (aPokemon: KindPokemon) => {\r\n        if (\"moves\" in aPokemon && aPokemon.moves) {\r\n            return aPokemon.moves.length;\r\n        }\r\n\r\n        return \"???\";\r\n    }\r\n\r\n    const getPokemonStat = (aPokemon: KindPokemon, stat: string) => {\r\n        if (\"stats\" in aPokemon && aPokemon.stats) {\r\n            const findStat = aPokemon.stats.find(item => item.stat.name === stat);\r\n            if (findStat) {\r\n                return findStat.base_stat;\r\n            }\r\n        }\r\n\r\n        return \"???\";\r\n    }\r\n\r\n    const aPokemon = fullPokemon || pokemon;\r\n    const pokemonImage = getPokemonImage(aPokemon);\r\n    const pokemonTypes = getPokemonTypes(aPokemon);\r\n    const pokemonMoves = getPokemonMoves(aPokemon);\r\n    const pokemonHp = getPokemonStat(aPokemon, \"hp\");\r\n    const pokemonAttack = getPokemonStat(aPokemon, \"attack\");\r\n    const pokemonDefence = getPokemonStat(aPokemon, \"defense\");\r\n    const pokemonSpAttack = getPokemonStat(aPokemon, \"special-attack\");\r\n    const pokemonSpDefence = getPokemonStat(aPokemon, \"special-defense\");\r\n    const pokemonSpeed = getPokemonStat(aPokemon, \"speed\");\r\n\r\n\r\n    return (\r\n        <div\r\n            className=\"pokemon-card\"\r\n            onClick={() => {\r\n            if (\"url\" in aPokemon) {\r\n                onItemClick(aPokemon.url)\r\n            } else {\r\n                onItemClick(null)\r\n            }\r\n        }}>\r\n            <figure className=\"\">\r\n                <img\r\n                    src={pokemonImage}\r\n                    alt=\"Pokemon\"\r\n                    className=\"pokemon-card__image\"\r\n                />\r\n            </figure>\r\n            <div className=\"pokemon-card__content\">\r\n                <h4 className=\"pokemon-card__title\">{aPokemon.name}</h4>\r\n                <div className=\"pokemon-card__description\">\r\n                    <div className=\"pokemon-card__types types\">\r\n                        {typeof pokemonTypes !== \"string\"\r\n                            ? pokemonTypes?.map(item => (<button className=\"button-type types__button\">{item}</button>))\r\n                            : (<p className=\"types__not\">???</p>)\r\n                        }\r\n                    </div>\r\n                    <table className=\"table\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>HP</td>\r\n                                <td>{pokemonHp}</td>\r\n                                <td>Weight</td>\r\n                                <td>{\"weight\" in aPokemon ? aPokemon.weight : \"???\"}</td>\r\n\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Attack</td>\r\n                                <td>{pokemonAttack}</td>\r\n                                <td>SP Attack</td>\r\n                                <td>{pokemonSpAttack}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Defence</td>\r\n                                <td>{pokemonDefence}</td>\r\n                                <td>SP Defence</td>\r\n                                <td>{pokemonSpDefence}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Speed</td>\r\n                                <td>{pokemonSpeed}</td>\r\n                                <td>Total moves</td>\r\n                                <td>{pokemonMoves}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {PokemonCard} from \"../PokemonCard/PokemonCard\";\r\nimport {FullPokemon, SimplePokemon} from \"../../react-app-env\";\r\nimport '../../styles/main.scss';\r\n\r\ninterface Props {\r\n    pokemons: SimplePokemon[],\r\n    onItemClick: (url: string | null) => void,\r\n    fullPokemon: FullPokemon | null,\r\n}\r\n\r\nexport const PokemonsList: React.FC<Props> = (props) => {\r\n    const { pokemons, onItemClick, fullPokemon } = props;\r\n\r\n    return (\r\n        <div className=\"pokemons-list grid__wrapper grid__wrapper--mobile\">\r\n            {pokemons.map(pokemon => {\r\n                if (fullPokemon && pokemon.name === fullPokemon.name) {\r\n                    return (\r\n                        <PokemonCard\r\n                            pokemon={pokemon}\r\n                            key={pokemon.name}\r\n                            onItemClick={onItemClick}\r\n                            fullPokemon={fullPokemon}\r\n                        />\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <PokemonCard\r\n                            pokemon={pokemon}\r\n                            key={pokemon.name}\r\n                            onItemClick={onItemClick}\r\n                        />\r\n                    )\r\n                }\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n","import {SimplePokemonsResponse} from \"./react-app-env\";\r\n\r\nconst BASE_URL = `https://pokeapi.co/api/v2/`;\r\nconst GET_POKEMONS = `pokemon?limit=12&offset=`;\r\n\r\nexport const request = (url: string) => {\r\n    return fetch(url)\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`${response.status} - ${response.statusText}`);\r\n            }\r\n\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const getPokemons = (offset: number):Promise<SimplePokemonsResponse> => {\r\n    const url = `${BASE_URL}${GET_POKEMONS}${offset}`;\r\n\r\n    return request(url);\r\n}\r\n","import {useEffect, useState} from 'react';\nimport './App.scss';\nimport './styles/main.scss';\nimport {PokemonsList} from \"./components/PokemonsList/PokemonsList\";\nimport {getPokemons, request} from \"./api\";\nimport {FullPokemon, SimplePokemon} from \"./react-app-env\";\n\nfunction App() {\n    const [pokemons, setPokemons] = useState<SimplePokemon[]>([]);\n    const [nextPokemons, setNextPokemons] = useState<string>('');\n    const [selectedPokemon, setSelectedPokemon] = useState<FullPokemon | null>(null);\n\n    useEffect(() => {\n        getPokemons(0).then(({next, results}) => {\n            setPokemons((prevState: SimplePokemon[]) => [...prevState, ...results]);\n            setNextPokemons(next);\n        });\n    }, [])\n\n    const loadMore = (url: string) => {\n        request(url).then(({next, results}) => {\n            setPokemons((prevState: SimplePokemon[]) => [...prevState, ...results]);\n            setNextPokemons(next);\n        })\n    }\n\n    const selectPokemon = (url: string | null) => {\n        if (url === null) {\n            setSelectedPokemon(null);\n            return;\n        }\n\n        request(url).then((fullPokemon) => {\n            setSelectedPokemon(fullPokemon);\n        })\n    }\n\n  return (\n    <div className=\"app\">\n        <h1 className=\"app__title\">Pokedex</h1>\n        <div className=\"app__catalog\">\n            <div className=\"\">\n                <PokemonsList\n                    pokemons={pokemons}\n                    onItemClick={selectPokemon}\n                    fullPokemon={selectedPokemon}\n                />\n            </div>\n            <div className=\"\">\n                <button\n                    className=\"button-main\"\n                    onClick={() => loadMore(nextPokemons)}\n                >\n                    Load More\n                </button>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}